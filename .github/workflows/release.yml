name: Release uConsole Images

on:
  push:
    tags:
      - 'v*'
      - 'release-*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release'
        required: true
        type: string
      kernel_mode:
        description: 'Kernel build mode'
        required: true
        type: choice
        options:
          - prebuilt
          - build
        default: build

permissions:
  contents: write

jobs:
  build-kernel:
    name: Build Kernel Packages
    runs-on: ubuntu-latest
    timeout-minutes: 360
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install kernel build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            bc \
            kmod \
            cpio \
            flex \
            bison \
            libncurses5-dev \
            libelf-dev \
            libssl-dev \
            fakeroot \
            dpkg-dev \
            debhelper \
            rsync \
            git \
            wget \
            ca-certificates
      
      - name: Build ClockworkPi kernel
        if: (github.event_name == 'workflow_dispatch' && inputs.kernel_mode == 'build') || github.event_name == 'push'
        run: |
          sudo ./scripts/build_clockworkpi_kernel.sh artifacts/kernel-debs
      
      - name: Create kernel info artifact
        run: |
          mkdir -p artifacts/kernel-debs
          echo "Kernel packages built on $(date -u)" > artifacts/kernel-debs/BUILD_INFO.txt
          echo "Repository: ${{ github.repository }}" >> artifacts/kernel-debs/BUILD_INFO.txt
          echo "Commit: ${{ github.sha }}" >> artifacts/kernel-debs/BUILD_INFO.txt
          ls -lh artifacts/kernel-debs/ >> artifacts/kernel-debs/BUILD_INFO.txt
      
      - name: Upload kernel packages
        uses: actions/upload-artifact@v4
        with:
          name: kernel-debs
          path: artifacts/kernel-debs/
          retention-days: 90
  
  build-images:
    name: Build Images
    needs: build-kernel
    runs-on: ubuntu-latest
    timeout-minutes: 240
    strategy:
      matrix:
        suite: [jammy, bookworm, trixie]
      fail-fast: false
    
    steps:
      - name: Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo docker image prune --all --force
          df -h
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Download kernel packages
        if: (github.event_name == 'workflow_dispatch' && inputs.kernel_mode == 'build') || github.event_name == 'push'
        uses: actions/download-artifact@v4
        with:
          name: kernel-debs
          path: artifacts/kernel-debs/
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            debootstrap \
            qemu-user-static \
            binfmt-support \
            kpartx \
            parted \
            dosfstools \
            rsync \
            xz-utils
      
      - name: Determine kernel mode
        id: kernel_mode
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "mode=${{ inputs.kernel_mode }}" >> $GITHUB_OUTPUT
          else
            echo "mode=build" >> $GITHUB_OUTPUT
          fi
      
      - name: Build image for ${{ matrix.suite }}
        run: |
          sudo SUITE=${{ matrix.suite }} \
               KERNEL_MODE=${{ steps.kernel_mode.outputs.mode }} \
               COMPRESS_FORMAT=xz \
               OUTPUT_DIR=output/images \
               ./scripts/generate_rpi_image.sh
      
      - name: Generate checksums
        run: |
          cd output/images
          sha256sum uconsole-${{ matrix.suite }}-*.img.xz > uconsole-${{ matrix.suite }}-arm64.sha256
      
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: uconsole-${{ matrix.suite }}-image
          path: |
            output/images/uconsole-${{ matrix.suite }}-*.img.xz
            output/images/uconsole-${{ matrix.suite }}-*.sha256
          retention-days: 30
  
  create-release:
    name: Create GitHub Release
    needs: [build-kernel, build-images]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/
      
      - name: Organize release files
        run: |
          mkdir -p release-files
          # Copy kernel debs
          if [ -d release-artifacts/kernel-debs ]; then
            cp release-artifacts/kernel-debs/*.deb release-files/ || true
            cp release-artifacts/kernel-debs/*.txt release-files/ || true
          fi
          # Copy images
          find release-artifacts -name "*.img.xz" -exec cp {} release-files/ \;
          find release-artifacts -name "*.sha256" -exec cp {} release-files/ \;
          ls -lh release-files/
      
      - name: Determine tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: uConsole Images ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false
          files: release-files/*
          body: |
            # uConsole Images - ${{ steps.tag.outputs.tag }}
            
            This release includes bootable Raspberry Pi images for ClockworkPi uConsole devices.
            
            ## Included Images
            
            - **Ubuntu 22.04 (jammy)**: Full-featured Ubuntu LTS
            - **Debian 12 (bookworm)**: Stable Debian release
            - **Debian 13 (trixie)**: Latest Debian testing
            
            ## Kernel Packages
            
            This release includes ClockworkPi kernel .deb packages that can be installed on any compatible Raspberry Pi OS.
            
            Kernel packages included:
            - `linux-image-*.deb` - Kernel image
            - `linux-headers-*.deb` - Kernel headers for module compilation
            - `linux-libc-dev-*.deb` - Kernel headers for userspace
            
            ## Installation
            
            ### Flash Image to SD Card
            
            ```bash
            # Extract and write to SD card (replace /dev/sdX with your SD card device)
            xz -dc uconsole-jammy-arm64.img.xz | sudo dd of=/dev/sdX bs=4M status=progress
            sudo sync
            ```
            
            ### Install Kernel Packages
            
            ```bash
            # Copy .deb files to your uConsole
            scp linux-*.deb uconsole@your-uconsole:/tmp/
            
            # Install on uConsole
            ssh uconsole@your-uconsole
            cd /tmp
            sudo dpkg -i linux-*.deb
            sudo apt-get install -f
            sudo reboot
            ```
            
            ## Verification
            
            Verify checksums before flashing:
            ```bash
            sha256sum -c uconsole-jammy-arm64.sha256
            ```
            
            ## Default Credentials
            
            - **Username**: uconsole
            - **Password**: uconsole
            - **Root access**: User has passwordless sudo
            
            ## More Information
            
            - Repository: https://github.com/${{ github.repository }}
            - Documentation: See README.md
            - Issues: https://github.com/${{ github.repository }}/issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
