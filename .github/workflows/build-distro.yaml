name: Build Distro Image (Unified)

on:
  workflow_dispatch:
    inputs:
      suite:
        description: 'Distribution suite (jammy|trixie|bookworm|popos)'
        required: true
        type: choice
        options:
          - jammy
          - trixie
          - bookworm
          - popos
        default: jammy
      recompile_kernel:
        description: 'Recompile kernel from source'
        required: true
        type: boolean
        default: false
  push:
    branches:
      - main
    paths:
      - 'scripts/build-image.sh'
      - 'scripts/setup-suite.sh'
      - '.github/workflows/build-distro.yaml'
  schedule:
    - cron: '0 2 * * *'  # Daily at 02:00 UTC

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 300
    strategy:
      matrix:
        suite: ${{ github.event_name == 'workflow_dispatch' && fromJSON(format('["{0}"]', inputs.suite)) || fromJSON('["jammy", "trixie", "bookworm", "popos"]') }}
    concurrency:
      group: build-${{ matrix.suite }}
      cancel-in-progress: false
    
    env:
      SUITE: ${{ matrix.suite }}
      RECOMPILE_KERNEL: ${{ github.event_name == 'workflow_dispatch' && inputs.recompile_kernel || 'false' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up QEMU for cross-architecture
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
           
      - name: Install kernel build dependencies (if recompiling)
        if: env.RECOMPILE_KERNEL == 'true'
        run: |
          sudo apt-get install -y \
            build-essential \
            bc \
            kmod \
            cpio \
            flex \
            libncurses5-dev \
            libelf-dev \
            libssl-dev \
            dwarves \
            bison \
            fakeroot \
            rsync
      
      - name: Apply ${{ matrix.suite }} customizations
        run: |
          SUITE=${{ matrix.suite }} RECOMPILE_KERNEL=${{ env.RECOMPILE_KERNEL }} ./scripts/setup-suite.sh build-output
        env:
          DEBIAN_FRONTEND: noninteractive
      
      - name: Create tarball artifact
        run: |
          cd build-output
          sudo tar -czf uconsole-${{ matrix.suite }}-arm64-rootfs.tar.gz rootfs-${{ steps.suite_info.outputs.debootstrap_suite }}-arm64
          sudo chown $USER:$USER uconsole-${{ matrix.suite }}-arm64-rootfs.tar.gz
          ls -lh uconsole-${{ matrix.suite }}-arm64-rootfs.tar.gz
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: uconsole-${{ matrix.suite }}-arm64-rootfs
          path: build-output/uconsole-${{ matrix.suite }}-arm64-rootfs.tar.gz
          retention-days: 30
      
      - name: Generate tag name
        id: tag
        run: |
          TAG_DATE=$(date +'%Y%m%d')
          TAG_NAME="${{ steps.suite_info.outputs.tag_prefix }}${TAG_DATE}"
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG_NAME}"
      
      - name: Check if tag exists
        id: check_tag
        run: |
          if git rev-parse "${{ steps.tag.outputs.tag_name }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.tag.outputs.tag_name }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag ${{ steps.tag.outputs.tag_name }} does not exist"
          fi
      
      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = '${{ steps.tag.outputs.tag_name }}';
            const sha = context.sha;
            
            console.log(`Creating tag ${tagName} at ${sha}`);
            
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: sha
            });
            
            console.log(`Tag ${tagName} created successfully`);
      
      - name: Update existing tag artifact
        if: steps.check_tag.outputs.exists == 'true'
        run: |
          echo "Tag ${{ steps.tag.outputs.tag_name }} already exists. Artifact uploaded but tag not updated."
          echo "To create a new tag, the build must run on a different day or the existing tag must be deleted."
