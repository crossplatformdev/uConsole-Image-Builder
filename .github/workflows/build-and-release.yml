name: Build and Release uConsole Images

on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      kernel_mode:
        description: 'Kernel mode (build/prebuilt)'
        required: true
        default: 'prebuilt'
        type: choice
        options:
          - build
          - prebuilt

env:
  KERNEL_MODE: ${{ github.event.inputs.kernel_mode || 'prebuilt' }}
  KERNEL_VERSION: ${{ github.event.inputs.kernel_version || 'rpi-6.12.y' }}
  KERNEL_ARCH: ${{ github.event.inputs.kernel_arch || 'arm64' }}
  KERNEL_COMMIT: 'rpi-6.12.y_20241206_2' # 'rpi-6.12.y'  # Can be modified to point to specific commit or branch
  UBUNTU_TASKS: 'ubuntu-server task-laptop network-manager network-manager-* wpasupplicant openssh-server'
  DEBIAN_TASKS: 'live-task-standard live-task-recommended task-laptop network-manager openssh-server'
  UCONSOLE_CORE: "cm4" # core model: cm4, cm5
    

jobs:
  prepare-kernel:
    runs-on: ubuntu-24.04-arm
    outputs:
      kernel_mode: ${{ env.KERNEL_MODE }}
    steps:
      - name: Checkout repository
        if: env.KERNEL_MODE == 'build'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build kernel
        if: env.KERNEL_MODE == 'build'
        run: |
          # enable debian sources
          cat /etc/apt/sources.list.d/ubuntu.sources
          sudo sed -i 's/deb/deb deb-src/g' /etc/apt/sources.list.d/ubuntu.sources
          sudo apt update 

          sudo apt install -y bc bison flex libssl-dev make libc6-dev libncurses5-dev
          sudo apt install -y build-essential
          sudo apt build-dep -y -a arm64 linux linux-raspi
          cd linux

          export URL="https://github.com/raspberrypi/linux/compare/rpi-6.12.y...ak-rex:ClockworkPi-linux:rpi-6.12.y.diff"
          export orig="$(basename "$URL")"
          export safe=uconsole-kernel-patch.diff
          
          echo "Downloading $URL -> $safe"
          if ! wget -q -O "$safe" "$URL"; then
            echo "Failed to download patch, exiting"
            exit 1
          fi

          if [ ! -f "$safe" ] || [ ! -s "$safe" ]; then
            echo "Patch file is empty or missing, exiting"
            exit 1
          fi

          export PATCH_ABSOLUTE_PATH="$(pwd)/$safe"
          
          ## If env.UCONSOLE_CORE is 'cm4'
          if [ "${{ env.UCONSOLE_CORE }}" == "cm4" ]; then
            export KERNEL=kernel8            
          else
            export KERNEL=kernel_2712            
          fi
          
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export LOCALVERSION=-raspi
          
          if ! patch -p1 < "$safe"; then
            echo "Patch application failed, exiting"
            exit 1
          fi

          if [ "${{ env.UCONSOLE_CORE }}" != "cm4" ]; then
            make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- bcm2711_defconfig
          else
            make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- bcm2712_defconfig
          fi
          
          make deb-pkg -j$(($(nproc) + 2)) LOCALVERSION=-raspi

          mkdir -p /home/runner/work/uConsole-Image-Builder/kernel-debs/
          
          mv ../*.deb /home/runner/work/uConsole-Image-Builder/kernel-debs/
          mv "$safe" /home/runner/work/uConsole-Image-Builder/uconsole-kernel-patch.diff

      - name: Upload kernel artifacts (1)
        if: env.KERNEL_MODE == 'build'
        uses: actions/upload-artifact@v4
        with:
          name: kernel-debs
          path: |
            /home/runner/work/uConsole-Image-Builder/kernel-debs/*.deb

      - name: Upload kernel artifacts (2) 
        if: env.KERNEL_MODE == 'build'
        uses: actions/upload-artifact@v4
        with:
          name: kernel-patch-uconsole
          path: |
            /home/runner/work/uConsole-Image-Builder/uconsole-kernel-patch.diff

  build-image:
    name: uconsole-${{ needs.prepare-kernel.outputs.kernel_mode }}-image
    needs: prepare-kernel
    runs-on: ubuntu-24.04-arm
    strategy:
      matrix:
        distro: [bookworm, trixie, jammy]
    outputs:
      image: ${{ matrix.distro }}
      kernel_version: ${{ env.KERNEL_VERSION }}
      kernel_arch: ${{ env.KERNEL_ARCH }}      
    steps:
      - name: Set up QEMU user-mode emulation
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm64
      
      - name: Install qemu-user-static and binfmt-support
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support
          # ensure update-binfmts exists and qemu-aarch64 interpreter is enabled
          if command -v update-binfmts >/dev/null 2>&1; then
            sudo update-binfmts --enable qemu-aarch64 || true
          fi

      - name: Install Debian archive keys and required tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg ca-certificates debian-archive-keyring

          # Ensure Debian archive keys are present
          sudo apt-get install -y --reinstall debian-archive-keyring || true

          KEYS="6ED0E7B82643E131 78DBA3BC47EF2265 F8D2585B8783D481 BDE6D2B9216EC7A8 8E9F831205B4BA95 762F67A0B2C39DE4"
          for key in $KEYS; do
            # Try HKPS first, fallback to hkp
            gpg --batch --keyserver hkps://keyserver.ubuntu.com --recv-keys "$key" \
              || gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys "$key"
            # Export and dearmor into apt trusted dir
            gpg --batch --export "$key" | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/${key}.gpg
          done

          # Sanity update (should succeed now)
          sudo apt-get update
          
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup rpi-image-gen
        if: matrix.distro == 'bookworm' || matrix.distro == 'trixie'
        run: |
          # Verify submodule is checked out
          if [ ! -f rpi-image-gen/rpi-image-gen ]; then
            echo "ERROR: rpi-image-gen submodule not properly checked out"
            exit 1
          fi
          cd rpi-image-gen
          sudo ./install_deps.sh
          ./rpi-image-gen layer --list
          sed -i 's/rpi5/rpi-cm4/g' ./config/${{ matrix.distro }}-minbase.yaml
          sed -i '/^name:/a mode: unshare' ./config/${{ matrix.distro }}-minbase.yaml


      - name: Download kernel artifacts
        if: needs.prepare-kernel.outputs.kernel_mode == 'build'
        uses: actions/download-artifact@v4
        with:
          name: kernel-debs
          path:  /home/runner/work/uConsole-Image-Builder/uConsole-Image-Builder/kernel-debs/

      - name: Build base image
        if: matrix.distro == 'bookworm' || matrix.distro == 'trixie'
        run: |
          cd rpi-image-gen
          ./rpi-image-gen build -c ./config/${{ matrix.distro }}-minbase.yaml

      - name: Customize image
        run: |
          # If matrix.distro is bookworm, use deb12-arm64-min.img
          # If matrix.distro is trixie, use deb13-arm64-min.img
          # If matrix.distro is jammy, use jammy for pi 4 (arm64) wget https://cdimage.ubuntu.com/releases/jammy/release/ubuntu-22.04.5-preinstalled-desktop-arm64+raspi.img.xz
          if [ "${{ matrix.distro }}" == "bookworm" ] || [ "${{ matrix.distro }}" == "trixie" ]; then            
            # If matrix.distro is bookworm, 
            if [ "${{ matrix.distro }}" == "bookworm" ]; then
              IMAGE_PATH=/home/runner/work/uConsole-Image-Builder/uConsole-Image-Builder/rpi-image-gen/work/image-deb12-arm64-min/deb12-arm64-min.img
            else
              IMAGE_PATH=/home/runner/work/uConsole-Image-Builder/uConsole-Image-Builder/rpi-image-gen/work/image-deb13-arm64-min/deb13-arm64-min.img
            fi
          fi
          
          if [ "${{ matrix.distro }}" == "jammy" ]; then
            IMAGE_PATH=https://cdimage.ubuntu.com/releases/jammy/release/ubuntu-22.04.5-preinstalled-server-arm64+raspi.img.xz
            wget $IMAGE_PATH -O ubuntu-jammy-raspi.img.xz > /dev/null 2>&1
            unxz ubuntu-jammy-raspi.img.xz
            IMAGE_PATH=./ubuntu-jammy-raspi.img
          fi

          if [ "${{ matrix.distro }}" == "popos" ]; then
            IMAGE_PATH=https://iso.pop-os.org/22.04/arm64/raspi/4/pop-os_22.04_arm64_raspi_4.img.xz
            wget $IMAGE_PATH -O pop-os_22.04_arm64_raspi_4.img.xz > /dev/null 2>&1
            unxz pop-os_22.04_arm64_raspi_4.img.xz
            IMAGE_PATH=./pop-os_22.04_arm64_raspi_4.img
          fi

          LOOP_DEVICE=$(sudo losetup -f)
          MOUNT_POINT=./rootfs

          echo "=====> IMAGE PATH: $IMAGE_PATH"
          echo "=====> LOOP DEVICE: $LOOP_DEVICE"
          echo "=====> MOUNT POINT: $MOUNT_POINT"

          # Create loop device and mount partitions
          sudo losetup -D  # Clear existing loop devices

          sudo losetup $LOOP_DEVICE -P "$IMAGE_PATH"
          
          sudo mkdir -p $MOUNT_POINT
          sudo mount ${LOOP_DEVICE}p2 $MOUNT_POINT
          sudo mount ${LOOP_DEVICE}p1 $MOUNT_POINT/boot/firmware
          sudo mount --bind /dev $MOUNT_POINT/dev
          sudo mount --bind /dev/pts $MOUNT_POINT/dev/pts
          sudo mount --bind /proc $MOUNT_POINT/proc
          sudo mount --bind /sys $MOUNT_POINT/sys

          sleep 5  # Wait for mounts to stabilize
     
          # Configure DNS resolvers
          sudo chroot $MOUNT_POINT /bin/bash -c "mv /etc/resolv.conf /etc/resolv.conf.bak || true"
          sudo chroot $MOUNT_POINT /bin/bash -c "echo 'nameserver 8.8.8.8' | tee /etc/resolv.conf"
          sudo chroot $MOUNT_POINT /bin/bash -c "echo 'nameserver 8.8.4.4' | tee -a /etc/resolv.conf"

          # Remove current linux
          sudo chroot $MOUNT_POINT /bin/bash -c "apt remove -y linux-image-* linux-headers-* linux-raspi-headers-* || true"
          
          # Add ClockworkPi repository
          ## If matrix distro is jammy, use ubuntu jammy repo
          sudo chroot $MOUNT_POINT /bin/bash -c "apt-get update && apt-get install -y wget gnupg initramfs-tools"

          sudo chroot $MOUNT_POINT /bin/bash -c "wget -q -O- https://raw.githubusercontent.com/clockworkpi/apt/main/debian/KEY.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/clockworkpi.gpg"
          sudo chroot $MOUNT_POINT /bin/bash -c "echo 'deb [arch=arm64] https://raw.githubusercontent.com/clockworkpi/apt/main/bookworm stable main' | sudo tee -a /etc/apt/sources.list.d/clockworkpi.list"
          sudo chroot $MOUNT_POINT /bin/bash -c "sudo apt update"
          sudo chroot $MOUNT_POINT /bin/bash -c "sudo apt install -y uconsole-kernel-cm4-rpi clockworkpi-*"

          if [ "${{ matrix.distro }}" == "jammy" ]; then
            # Install tasks 'ubuntu-server' and 'ubuntu-desktop' with install recommends
            sudo chroot $MOUNT_POINT /bin/bash -c "apt update && apt install --install-recommends -y aptitude tasksel ${{ env.UBUNTU_TASKS }}"
          else
            # Install tasks 'debian-server' and 'debian-desktop'
            sudo chroot $MOUNT_POINT /bin/bash -c "apt update && apt install --install-recommends -y aptitude tasksel ${{ env.DEBIAN_TASKS }}"
          fi

          if [ "${{ env.KERNEL_MODE }}" == "prebuilt" ]; then
            sudo chroot $MOUNT_POINT /bin/bash -c "apt install -y uconsole-kernel-cm4-rpi"
          else
            sudo cp  /home/runner/work/uConsole-Image-Builder/uConsole-Image-Builder/kernel-debs/*.deb $MOUNT_POINT/tmp/
            sudo chroot $MOUNT_POINT /bin/bash -c "dpkg -i /tmp/*.deb || apt install -f -y"
          fi

          # Set LOCALE to en_US.UTF-8
          sudo chroot $MOUNT_POINT /bin/bash -c "apt install -y locales tzdata"
          sudo chroot $MOUNT_POINT /bin/bash -c "echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen && locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8"                  
          
          # Configure uConsole-specific config.txt
          sudo tee $MOUNT_POINT/boot/firmware/config.txt << 'EOF'
          # For more options and information see
          # http://rptl.io/configtxt
          # Some settings may impact device functionality. See link above for details

          # Uncomment some or all of these to enable the optional hardware interfaces
          #dtparam=i2c_arm=on
          #dtparam=i2s=on
          #dtparam=spi=on

          # Enable audio (loads snd_bcm2835)
          dtparam=audio=on

          # Additional overlays and parameters are documented
          # /boot/firmware/overlays/README

          # Automatically load overlays for detected cameras
          camera_auto_detect=1

          # Automatically load overlays for detected DSI displays
          display_auto_detect=1

          # Automatically load initramfs files, if found
          auto_initramfs=1

          # Enable DRM VC4 V3D driver
          #dtoverlay=vc4-kms-v3d

          max_framebuffers=2

          # Don't have the firmware create an initial video= setting in cmdline.txt.
          # Use the kernel's default instead.
          #disable_fw_kms_setup=1

          # Run in 64-bit mode
          arm_64bit=1

          # Disable compensation for displays with overscan
          disable_overscan=1

          # Run as fast as firmware / board allows
          arm_boost=1

          # Enable host mode on the 2711 built-in XHCI USB controller.
          # This line should be removed if the legacy DWC2 controller is required
          # (e.g. for USB device mode) or if USB support is not required.
          #otg_mode=1

          ignore_lcd=1
          display_auto_detect=0
          dtoverlay=audremap,pins_12_13
          dtoverlay=dwc2,dr_mode=host
          dtparam=ant2

          # Enable DRM VC4 V3D driver (Clockworkpi uConsole CM4)
          dtoverlay=clockworkpi-uconsole
          dtoverlay=vc4-kms-v3d-pi4,cma-384
          dtparam=pciex1=off
          dtparam=spi=on
          enable_uart=1
          #dtparam=drm_fb0_rp1_dsi1
          #initial_turbo=0
          EOF

          # Generate vmlinuz (raspi kernel) initramfs
          sudo chroot $MOUNT_POINT /bin/bash -c "update-initramfs -c -k all"
          
          #sudo chroot $MOUNT_POINT /bin/bash -c "apt-get auto-remove" 
          #sudo chroot $MOUNT_POINT /bin/bash -c "apt-get clean"
          #sudo chroot $MOUNT_POINT /bin/bash -c "apt-get update"
          #sudo chroot $MOUNT_POINT /bin/bash -c "apt-get upgrade -y"

          # Create user 'clockworkpi', identified by 'clockworkpi', create skeleton home directory and add to sudoers
          sudo chroot $MOUNT_POINT /bin/bash -c "adduser --gecos 'Clockwork Pi,,,,' --disabled-password clockworkpi || true"
          sudo chroot $MOUNT_POINT /bin/bash -c "echo 'clockworkpi:clockworkpi' | chpasswd"
          sudo chroot $MOUNT_POINT /bin/bash -c "usermod -aG sudo clockworkpi"
          sudo chroot $MOUNT_POINT /bin/bash -c "echo 'clockworkpi ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"

          sudo chroot $MOUNT_POINT /bin/bash -c "mkdir -p /home/clockworkpi/Desktop"
          sudo chroot $MOUNT_POINT /bin/bash -c "chown -R clockworkpi:clockworkpi /home/clockworkpi/Desktop"

          # Set hostname
          sudo chroot $MOUNT_POINT /bin/bash -c "echo 'uconsole' > /etc/hostname"
          sudo chroot $MOUNT_POINT /bin/bash -c "sed -i 's/ubuntu|debian|raspbian|raspberrypi/uconsole/g' /etc/hosts"

          # Enable SSH by default
          sudo chroot $MOUNT_POINT /bin/bash -c "apt install -y openssh-server"
          sudo chroot $MOUNT_POINT /bin/bash -c "systemctl enable ssh"
          sudo chroot $MOUNT_POINT /bin/bash -c "touch /boot/firmware/ssh"
          
          # Set timezone to UTC
          sudo chroot $MOUNT_POINT /bin/bash -c "ln -sf /usr/share/zoneinfo/UTC /etc/localtime"
          sudo chroot $MOUNT_POINT /bin/bash -c "dpkg-reconfigure -f noninteractive tzdata"

          # Set keyboard layout to us
          sudo chroot $MOUNT_POINT /bin/bash -c "apt install -y keyboard-configuration"
          sudo chroot $MOUNT_POINT /bin/bash -c "echo 'XKBLAYOUT=\"us\"' >> /etc/default/keyboard"
          sudo chroot $MOUNT_POINT /bin/bash -c "echo 'XKBMODEL=\"pc105\"' >> /etc/default/keyboard"
          sudo chroot $MOUNT_POINT /bin/bash -c "dpkg-reconfigure -f noninteractive keyboard-configuration"
          
          # Restore original resolv.conf
          sudo chroot $MOUNT_POINT /bin/bash -c "mv /etc/resolv.conf.bak /etc/resolv.conf || true"

          # Clean up
          sudo umount $MOUNT_POINT/dev/pts
          sudo umount $MOUNT_POINT/dev
          sudo umount $MOUNT_POINT/proc
          sudo umount $MOUNT_POINT/sys
          
          sudo umount $MOUNT_POINT/boot/firmware
          sudo umount $MOUNT_POINT
          sudo losetup -d $LOOP_DEVICE
          
          # Compress image
          xz --threads=1 --memory=1000MiB --check=crc32 --compress --keep "$IMAGE_PATH"
          mv "${IMAGE_PATH}.xz" /home/runner/work/uConsole-Image-Builder/uconsole-${{ matrix.distro }}-cm4.img.xz
      
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: uconsole-${{ matrix.distro }}-cm4.img.xz
          path: /home/runner/work/uConsole-Image-Builder/uconsole-${{ matrix.distro }}-cm4.img.xz

  release:
    needs: [prepare-kernel, build-image]
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download kernel artifacts
        if: needs.prepare-kernel.outputs.kernel_mode == 'build'
        uses: actions/download-artifact@v4
        with:
          name: kernel-debs
          path: /home/runner/work/uConsole-Image-Builder/release/

      - name: Download patch artifacts
        if: needs.prepare-kernel.outputs.kernel_mode == 'build'
        uses: actions/download-artifact@v4
        with:
          name: kernel-patch-uconsole
          path: /home/runner/work/uConsole-Image-Builder/release/

      - name: Download image artifacts
        uses: actions/download-artifact@v4
        with:
          name: uconsole-trixie-cm4.img.xz
          path: /home/runner/work/uConsole-Image-Builder/release/

      - name: Download image artifacts
        uses: actions/download-artifact@v4
        with:
          name: uconsole-bookworm-cm4.img.xz
          path: /home/runner/work/uConsole-Image-Builder/release/

      - name: Download image artifacts
        uses: actions/download-artifact@v4
        with:
          name: uconsole-jammy-cm4.img.xz
          path: /home/runner/work/uConsole-Image-Builder/release/

      - name: Create release tag
        id: tag
        run: |
          TAG_NAME="release-$(date +'%Y%m%d-%H%M%S')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          git tag $TAG_NAME
          git push origin $TAG_NAME
          ls -laR /home/runner/work/uConsole-Image-Builder/release/

      - name: Create GitHub Release
        if: needs.prepare-kernel.outputs.kernel_mode == 'build'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: Images for uconsole-${{ env.UCONSOLE_CORE }}-${{ env.KERNEL_VERSION }}-${{ steps.tag.outputs.tag_name }}
          files: |
            /home/runner/work/uConsole-Image-Builder/release/*.img.xz
            /home/runner/work/uConsole-Image-Builder/release/*.deb
            /home/runner/work/uConsole-Image-Builder/release/*.diff
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: needs.prepare-kernel.outputs.kernel_mode == 'prebuilt'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: Images for uconsole-${{ env.UCONSOLE_CORE }}-${{ env.KERNEL_VERSION }}-${{ steps.tag.outputs.tag_name }}
          files: |
            /home/runner/work/uConsole-Image-Builder/release/*.img.xz            
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          
