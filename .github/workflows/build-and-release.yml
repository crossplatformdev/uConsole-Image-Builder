name: Build and Release uConsole Images

on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      kernel_mode:
        description: 'Kernel mode (build/prebuilt)'
        required: true
        default: 'prebuilt'
        type: choice
        options:
          - build
          - prebuilt

env:
  KERNEL_MODE: ${{ github.event.inputs.kernel_mode || 'prebuilt' }}

jobs:
  prepare-kernel:
    runs-on: ubuntu-24.04
    outputs:
      kernel_mode: ${{ env.KERNEL_MODE }}
    steps:
      - name: Checkout repository
        if: env.KERNEL_MODE == 'build'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build kernel
        if: env.KERNEL_MODE == 'build'
        run: |
          sudo apt update
          sudo apt -y install bc bison flex libssl-dev make libc6-dev libncurses5-dev wget
          sudo apt -y install crossbuild-essential-arm64
                    
          cd linux

          export URL="https://github.com/raspberrypi/linux/compare/rpi-6.12.y...ak-rex:ClockworkPi-linux:rpi-6.12.y.diff"
          export orig="$(basename "$URL")"
          export safe="$(echo "$orig" | sed 's/[^A-Za-z0-9._-]/_/g')"
          
          echo "Downloading $URL -> $safe"
          wget -q -O "$safe" "$URL"

          export PATCH_ABSOLUTE_PATH=`pwd`/"$safe"
          
          export KERNEL=kernel8
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export LOCALCONFIG=-raspi
          patch -p1 < "$safe"
          make bcm2711_defconfig
          make deb-pkg -j$(($(nproc) + 2))

      - name: Upload kernel artifacts
        if: env.KERNEL_MODE == 'build'
        uses: actions/upload-artifact@v4
        with:
          name: kernel-debs
          path: |
            ./*.deb
            
      - name: Upload patch
        if: env.KERNEL_MODE == 'build'
        uses: actions/upload-artifact@v4
        with:
          name: kernel-patch
          path: $PATCH_ABSOLUTE_PATH

  build-image:
    needs: prepare-kernel
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        distro: [bookworm, trixie, jammy]
    steps:
      - name: Set up QEMU user-mode emulation
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm64

      - name: Install qemu-user-static and binfmt-support
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support
          # ensure update-binfmts exists and qemu-aarch64 interpreter is enabled
          if command -v update-binfmts >/dev/null 2>&1; then
            sudo update-binfmts --enable qemu-aarch64 || true
          fi

      - name: Install Debian archive keys and required tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg ca-certificates debian-archive-keyring

          # Ensure Debian archive keys are present
          sudo apt-get install -y --reinstall debian-archive-keyring || true

          # Add any additional public keys reported in the logs so apt can verify repos
          KEYS="6ED0E7B82643E131 78DBA3BC47EF2265 F8D2585B8783D481 54404762BBB6E853 BDE6D2B9216EC7A8"
          for key in $KEYS; do
            # Try HKPS first, fallback to hkp
            gpg --batch --keyserver hkps://keyserver.ubuntu.com --recv-keys "$key" \
              || gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys "$key"
            # Export and dearmor into apt trusted dir
            gpg --batch --export "$key" | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/${key}.gpg
          done

          # Sanity update (should succeed now)
          sudo apt-get update
          
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone rpi-image-gen
        if: matrix.distro == 'bookworm' || matrix.distro == 'trixie'
        run: |
          git clone https://github.com/raspberrypi/rpi-image-gen.git
          cd rpi-image-gen
          sudo ./install_deps.sh
          ./rpi-image-gen layer --list
          sed -i 's/rpi5/rpi-cm4/g' ./config/${{ matrix.distro }}-minbase.yaml
          sed -i '/^name:/a mode: unshare' ./config/${{ matrix.distro }}-minbase.yaml


      - name: Download kernel artifacts
        if: needs.prepare-kernel.outputs.kernel_mode == 'build' && (matrix.distro == 'bookworm' || matrix.distro == 'trixie')
        uses: actions/download-artifact@v4
        with:
          name: kernel-debs
          path: ./kernel-debs

      - name: Build base image
        if: matrix.distro == 'bookworm' || matrix.distro == 'trixie'
        run: |
          cd rpi-image-gen
          ./rpi-image-gen build -c ./config/${{ matrix.distro }}-minbase.yaml

      - name: Customize image
        run: |
          # If matrix.distro is bookworm, use deb12-arm64-min.img
          # If matrix.distro is trixie, use deb13-arm64-min.img
          # If matrix.distro is jammy, use jammy for pi 4 (arm64) wget https://cdimage.ubuntu.com/releases/jammy/release/ubuntu-22.04.5-preinstalled-desktop-arm64+raspi.img.xz
          if [ "${{ matrix.distro }}" == "bookworm" ] || [ "${{ matrix.distro }}" == "trixie" ]; then            
            # If matrix.distro is bookworm, 
            if [ "${{ matrix.distro }}" == "bookworm" ]; then
              IMAGE_PATH=/home/runner/work/uConsole-Image-Builder/uConsole-Image-Builder/rpi-image-gen/work/image-deb12-arm64-min/deb12-arm64-min.img
            else
              IMAGE_PATH=/home/runner/work/uConsole-Image-Builder/uConsole-Image-Builder/rpi-image-gen/work/image-deb13-arm64-min/deb13-arm64-min.img
            fi
          fi
          
          if [ "${{ matrix.distro }}" == "jammy" ]; then
            IMAGE_PATH=https://cdimage.ubuntu.com/releases/jammy/release/ubuntu-22.04.5-preinstalled-desktop-arm64+raspi.img.xz
            wget $IMAGE_PATH -O ubuntu-jammy-raspi.img.xz
            unxz ubuntu-jammy-raspi.img.xz
            IMAGE_PATH=./ubuntu-jammy-raspi.img
          fi

          if [ "${{ matrix.distro }}" == "popos" ]; then
            IMAGE_PATH=https://iso.pop-os.org/22.04/arm64/raspi/4/pop-os_22.04_arm64_raspi_4.img.xz
            wget $IMAGE_PATH -O pop-os_22.04_arm64_raspi_4.img.xz
            unxz pop-os_22.04_arm64_raspi_4.img.xz
            IMAGE_PATH=./pop-os_22.04_arm64_raspi_4.img
          fi

          LOOP_DEVICE=$(sudo losetup -f)
          MOUNT_POINT=./rootfs

          echo "=====> IMAGE PATH: $IMAGE_PATH"
          echo "=====> LOOP DEVICE: $LOOP_DEVICE"
          echo "=====> MOUNT POINT: $MOUNT_POINT"


          # Create loop device and mount partitions
          sudo losetup -D  # Clear existing loop devices

          sudo losetup $LOOP_DEVICE -P "$IMAGE_PATH"
          
          sudo mkdir -p $MOUNT_POINT
          sudo mount ${LOOP_DEVICE}p2 $MOUNT_POINT
          sudo mount ${LOOP_DEVICE}p1 $MOUNT_POINT/boot/firmware
          sudo mount --bind /dev $MOUNT_POINT/dev
          sudo mount --bind /dev/pts $MOUNT_POINT/dev/pts
          sudo mount --bind /proc $MOUNT_POINT/proc
          sudo mount --bind /sys $MOUNT_POINT/sys

          sleep 5  # Wait for mounts to stabilize

          # Configure DNS resolvers
          sudo chroot $MOUNT_POINT /bin/bash -c "echo 'nameserver 8.8.8.8' | tee /etc/resolv.conf"
          sudo chroot $MOUNT_POINT /bin/bash -c "echo 'nameserver 8.8.4.4' | tee -a /etc/resolv.conf"

          # Add ClockworkPi repository
          ## If matrix distro is jammy, use ubuntu jammy repo
          sudo chroot $MOUNT_POINT /bin/bash -c "wget -q -O- https://raw.githubusercontent.com/clockworkpi/apt/main/debian/KEY.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/clockworkpi.gpg"
          if [ "${{ matrix.distro }}" == "jammy" ]; then
            echo "deb https://raw.githubusercontent.com/clockworkpi/apt/main/bookworm stable main" | sudo tee $MOUNT_POINT/etc/apt/sources.list.d/clockworkpi.list
          else
            echo "deb https://raw.githubusercontent.com/clockworkpi/apt/main/${{ matrix.distro }} stable main" | sudo tee $MOUNT_POINT/etc/apt/sources.list.d/clockworkpi.list
          fi

          
          # Install packages in chroot
          sudo chroot $MOUNT_POINT /bin/bash -c "apt update && apt install -y clockworkpi-audio clockworkpi-cm-firmware"
          
          if [ "${{ needs.prepare-kernel.outputs.kernel_mode }}" == "prebuilt" ]; then
            sudo chroot $MOUNT_POINT /bin/bash -c "apt install -y uconsole-kernel-cm4-rpi"
          else
            sudo cp ../kernel-debs/*.deb $MOUNT_POINT/tmp/
            sudo chroot $MOUNT_POINT /bin/bash -c "dpkg -i /tmp/*.deb || apt install -f -y"
          fi

          # Set LOCALE to en_US.UTF-8
          sudo chroot $MOUNT_POINT /bin/bash -c "tzselect noninteractive && echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen && locale-gen en_US.UTF-8 && update-locale LANG=en_US.UTF-8"
          
          # Clean up
          sudo umount $MOUNT_POINT/dev/pts
          sudo umount $MOUNT_POINT/dev
          sudo umount $MOUNT_POINT/proc
          sudo umount $MOUNT_POINT/sys
          
          sudo umount $MOUNT_POINT/boot/firmware
          sudo umount $MOUNT_POINT
          sudo losetup -d $LOOP_DEVICE
          
          # Compress image
          xz -9 -T0 "$IMAGE_PATH"
          mv "${IMAGE_PATH}.xz" ../uconsole-${{ matrix.distro }}-cm4.img.xz
      
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: uconsole-${{ matrix.distro }}-image
          path: uconsole-${{ matrix.distro }}-cm4.img.xz

  release:
    needs: [prepare-kernel, build-image]
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release tag
        id: tag
        run: |
          TAG_NAME="release-$(date +'%Y%m%d-%H%M%S')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.output.tag_name }}
          files: |
            kernel-debs/*.deb
            kernel-patch/*.diff
            uconsole-*-image/*.img.xz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
