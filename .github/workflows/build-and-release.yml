name: Build and Release uConsole Images

on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      kernel_mode:
        description: 'Kernel mode (build/prebuilt)'
        required: true
        default: 'prebuilt'
        type: choice
        options:
          - build
          - prebuilt

env:
  KERNEL_MODE: ${{ github.event.inputs.kernel_mode || 'prebuilt' }}

jobs:
  prepare-kernel:
    runs-on: ubuntu-24.04
    outputs:
      kernel_mode: ${{ env.KERNEL_MODE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt -y install bc bison flex libssl-dev make libc6-dev libncurses5-dev wget
          sudo apt -y install crossbuild-essential-arm64

      - name: Download and apply patch        
        run: |
          export URL="https://github.com/raspberrypi/linux/compare/rpi-6.12.y...ak-rex:ClockworkPi-linux:rpi-6.12.y.diff"
          export orig="$(basename "$URL")"
          export safe="$(echo "$orig" | sed 's/[^A-Za-z0-9._-]/_/g')"
          echo "Downloading $URL -> $safe"
          wget -q -O "$safe" "$URL"          
          
      - name: Build kernel
        if: env.KERNEL_MODE == 'build'
        run: |
          cd linux
          export KERNEL=kernel8
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export LOCALCONFIG=-raspi
          patch -p1 < "$safe"
          make bcm2711_defconfig
          make deb-pkg -j$(($(nproc) + 2))

      - name: Upload kernel artifacts
        if: env.KERNEL_MODE == 'build'
        uses: actions/upload-artifact@v4
        with:
          name: kernel-debs
          path: |
            ./*.deb
            
      - name: Upload patch
        uses: actions/upload-artifact@v4
        with:
          name: kernel-patch
          path: rpi-6.12.y...ak-rex:ClockworkPi-linux:rpi-6.12.y.diff

  build-image:
    needs: prepare-kernel
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        distro: [bookworm, trixie]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone rpi-image-gen
        run: |
          git clone https://github.com/raspberrypi/rpi-image-gen.git
          cd rpi-image-gen
          sudo ./install_deps.sh

      - name: Download kernel artifacts
        if: needs.prepare-kernel.outputs.kernel_mode == 'build'
        uses: actions/download-artifact@v4
        with:
          name: kernel-debs
          path: ./kernel-debs

      - name: Build base image
        run: |
          cd rpi-image-gen
          ./rpi-image-gen build -c ./config/${{ matrix.distro }}-minbase.yaml

      - name: Customize image
        run: |
          cd rpi-image-gen
          IMAGE_PATH=$(find output -name "*.img" | head -n 1)
          LOOP_DEVICE=$(sudo losetup -fP --show "$IMAGE_PATH")
          MOUNT_POINT=/mnt/uconsole-image
          sudo mkdir -p $MOUNT_POINT
          sudo mount ${LOOP_DEVICE}p2 $MOUNT_POINT
          sudo mount ${LOOP_DEVICE}p1 $MOUNT_POINT/boot
          
          # Add ClockworkPi repository
          echo "deb https://raw.githubusercontent.com/clockworkpi/apt/main/${{ matrix.distro }} stable main" | sudo tee $MOUNT_POINT/etc/apt/sources.list.d/clockworkpi.list
          
          # Install packages in chroot
          sudo chroot $MOUNT_POINT /bin/bash -c "apt update && apt install -y clockworkpi-audio clockworkpi-firmware"
          
          if [ "${{ needs.prepare-kernel.outputs.kernel_mode }}" == "prebuilt" ]; then
            sudo chroot $MOUNT_POINT /bin/bash -c "apt install -y uconsole-kernel-cm4-rpi"
          else
            sudo cp ../kernel-debs/*.deb $MOUNT_POINT/tmp/
            sudo chroot $MOUNT_POINT /bin/bash -c "dpkg -i /tmp/*.deb || apt install -f -y"
          fi
          
          sudo umount $MOUNT_POINT/boot
          sudo umount $MOUNT_POINT
          sudo losetup -d $LOOP_DEVICE
          
          # Compress image
          xz -9 -T0 "$IMAGE_PATH"
          mv "${IMAGE_PATH}.xz" ../uconsole-${{ matrix.distro }}-cm4.img.xz

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: uconsole-${{ matrix.distro }}-image
          path: uconsole-${{ matrix.distro }}-cm4.img.xz

  release:
    needs: [prepare-kernel, build-image]
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release tag
        id: tag
        run: |
          TAG_NAME="release-$(date +'%Y%m%d-%H%M%S')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.output.tag_name }}
          files: |
            kernel-debs/*.deb
            kernel-patch/*.diff
            uconsole-*-image/*.img.xz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
