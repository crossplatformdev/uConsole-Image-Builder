name: Build and Release uConsole Images

on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      kernel_mode:
        description: 'Kernel mode (build/prebuilt)'
        required: true
        default: 'prebuilt'
        type: choice
        options:
          - build
          - prebuilt

env:
  KERNEL_MODE: ${{ github.event.inputs.kernel_mode || 'prebuilt' }}

jobs:
  prepare-kernel:
    runs-on: ubuntu-24.04
    outputs:
      kernel_mode: ${{ env.KERNEL_MODE }}
    steps:
      - name: Checkout repository
        if: env.KERNEL_MODE == 'build'
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build kernel
        if: env.KERNEL_MODE == 'build'
        run: |
          sudo apt update
          sudo apt -y install bc bison flex libssl-dev make libc6-dev libncurses5-dev wget
          sudo apt -y install crossbuild-essential-arm64
                    
          cd linux

          export URL="https://github.com/raspberrypi/linux/compare/rpi-6.12.y...ak-rex:ClockworkPi-linux:rpi-6.12.y.diff"
          export orig="$(basename "$URL")"
          export safe="$(echo "$orig" | sed 's/[^A-Za-z0-9._-]/_/g')"
          
          echo "Downloading $URL -> $safe"
          wget -q -O "$safe" "$URL"

          export PATCH_ABSOLUTE_PATH=`pwd`/"$safe"
          
          export KERNEL=kernel8
          export ARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export LOCALCONFIG=-raspi
          patch -p1 < "$safe"
          make bcm2711_defconfig
          make deb-pkg -j$(($(nproc) + 2))

      - name: Upload kernel artifacts
        if: env.KERNEL_MODE == 'build'
        uses: actions/upload-artifact@v4
        with:
          name: kernel-debs
          path: |
            ./*.deb
            
      - name: Upload patch
        if: env.KERNEL_MODE == 'build'
        uses: actions/upload-artifact@v4
        with:
          name: kernel-patch
          path: $PATCH_ABSOLUTE_PATH

  build-image:
    needs: prepare-kernel
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        distro: [bookworm, trixie]
    steps:
      - name: Set up QEMU user-mode emulation
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/arm64

      - name: Install qemu-user-static and binfmt-support
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user-static binfmt-support
          if command -v update-binfmts >/dev/null 2>&1; then
            sudo update-binfmts --enable qemu-aarch64 || true
          fi

      - name: Install Debian archive keys and required tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg ca-certificates debian-archive-keyring

          sudo apt-get install -y --reinstall debian-archive-keyring || true

          KEYS="6ED0E7B82643E131 78DBA3BC47EF2265 F8D2585B8783D481 54404762BBB6E853 BDE6D2B9216EC7A8"
          for key in $KEYS; do
            gpg --batch --keyserver hkps://keyserver.ubuntu.com --recv-keys "$key" \
              || gpg --batch --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys "$key"
            gpg --batch --export "$key" | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/${key}.gpg
          done

          sudo apt-get update
          
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clone rpi-image-gen
        run: |
          git clone https://github.com/raspberrypi/rpi-image-gen.git
          cd rpi-image-gen
          sudo ./install_deps.sh
          ./rpi-image-gen layer --list
          sed -i 's/rpi5/rpi-cm4/g' ./config/${{ matrix.distro }}-minbase.yaml
          sed -i '/^name:/a mode: unshare' ./config/${{ matrix.distro }}-minbase.yaml

      - name: Download kernel artifacts
        if: needs.prepare-kernel.outputs.kernel_mode == 'build'
        uses: actions/download-artifact@v4
        with:
          name: kernel-debs
          path: ./kernel-debs

      - name: Build base image
        run: |
          cd rpi-image-gen
          ./rpi-image-gen build -c ./config/${{ matrix.distro }}-minbase.yaml

      - name: Customize image
        id: customize
        run: |        
          set -euo pipefail
          cd rpi-image-gen
          
          IMAGE_PATH=$(find "./work/image-deb12-arm64-min/deb12-arm64-min.img" "./work/image-deb13-arm64-min/deb13-arm64-min.img" -name "*.img" 2>/dev/null | head -n 1)
          
          if [ -z "$IMAGE_PATH" ]; then
            echo "Error: Image file not found"
            exit 1
          fi
          
          MOUNT_POINT=/mnt/uconsole-image
          
          echo "IMAGE_PATH=$IMAGE_PATH" >> $GITHUB_OUTPUT
          echo "MOUNT_POINT=$MOUNT_POINT" >> $GITHUB_OUTPUT
          
          echo "=====> IMAGE PATH: $IMAGE_PATH"
          echo "=====> MOUNT POINT: $MOUNT_POINT"

          sudo apt install -y kpartx 
          
          # Set up loop device with retry logic
          for i in {1..5}; do
            LOOP_DEVICE=$(sudo losetup -fP --show "$IMAGE_PATH" 2>/dev/null || true)
            if [ -n "$LOOP_DEVICE" ]; then
              break
            fi
            echo "Retrying losetup ($i/5)..."
            sleep 2
          done
          
          if [ -z "$LOOP_DEVICE" ]; then
            echo "Error: Failed to create loop device"
            exit 1
          fi
          
          echo "LOOP_DEVICE=$LOOP_DEVICE" >> $GITHUB_OUTPUT
          echo "=====> LOOP DEVICE: $LOOP_DEVICE"
          
          # Wait for device nodes to appear
          sleep 2
          sudo partprobe "$LOOP_DEVICE" || true
          
          # Use kpartx to create device mappings
          sudo kpartx -a -v "$LOOP_DEVICE"
          sleep 2
          
          # Identify partition devices (may be /dev/loopXpY or /dev/mapper/loopXpY)
          if [ -b "${LOOP_DEVICE}p1" ]; then
            BOOT_DEV="${LOOP_DEVICE}p1"
            ROOT_DEV="${LOOP_DEVICE}p2"
          elif [ -b "/dev/mapper/$(basename $LOOP_DEVICE)p1" ]; then
            BOOT_DEV="/dev/mapper/$(basename $LOOP_DEVICE)p1"
            ROOT_DEV="/dev/mapper/$(basename $LOOP_DEVICE)p2"
          else
            echo "Error: Partition devices not found"
            exit 1
          fi
          
          echo "BOOT_DEV=$BOOT_DEV" >> $GITHUB_OUTPUT
          echo "ROOT_DEV=$ROOT_DEV" >> $GITHUB_OUTPUT
          
          # Force unmount any existing mounts
          sudo umount -l "$MOUNT_POINT/boot/firmware" 2>/dev/null || true
          sudo umount -l "$MOUNT_POINT" 2>/dev/null || true
          sudo umount -l "$BOOT_DEV" 2>/dev/null || true
          sudo umount -l "$ROOT_DEV" 2>/dev/null || true
          
          # Kill any processes using the mount point
          sudo fuser -km "$MOUNT_POINT" 2>/dev/null || true
          sleep 1
          
          # Create and mount
          sudo mkdir -p "$MOUNT_POINT/boot/firmware"
          sudo mount "$ROOT_DEV" "$MOUNT_POINT"
          sudo mount "$BOOT_DEV" "$MOUNT_POINT/boot/firmware"
          
          # Add ClockworkPi repository
          echo "deb https://raw.githubusercontent.com/clockworkpi/apt/main/${{ matrix.distro }} stable main" | sudo tee "$MOUNT_POINT/etc/apt/sources.list.d/clockworkpi.list"
          
          # Install packages in chroot with error handling
          sudo chroot "$MOUNT_POINT" /bin/bash -c "apt update && apt install -y clockworkpi-audio clockworkpi-firmware" || {
            echo "Error: Failed to install ClockworkPi packages"
            exit 1
          }
          
          if [ "${{ needs.prepare-kernel.outputs.kernel_mode }}" == "prebuilt" ]; then
            sudo chroot "$MOUNT_POINT" /bin/bash -c "apt install -y uconsole-kernel-cm4-rpi" || {
              echo "Error: Failed to install prebuilt kernel"
              exit 1
            }
          else
            sudo cp ../kernel-debs/*.deb "$MOUNT_POINT/tmp/"
            sudo chroot "$MOUNT_POINT" /bin/bash -c "dpkg -i /tmp/*.deb || apt install -f -y" || {
              echo "Error: Failed to install custom kernel"
              exit 1
            }
          fi
          
          # Sync to ensure all writes are flushed
          sync
          
          # Unmount with retry logic
          for i in {1..5}; do
            if sudo umount "$MOUNT_POINT/boot/firmware" 2>/dev/null; then
              break
            fi
            echo "Retrying boot umount ($i/5)..."
            sudo fuser -km "$MOUNT_POINT/boot/firmware" 2>/dev/null || true
            sleep 2
          done
          
          for i in {1..5}; do
            if sudo umount "$MOUNT_POINT" 2>/dev/null; then
              break
            fi
            echo "Retrying root umount ($i/5)..."
            sudo fuser -km "$MOUNT_POINT" 2>/dev/null || true
            sleep 2
          done
          
          # Remove kpartx mappings
          sudo kpartx -d "$LOOP_DEVICE" || true
          
          # Detach loop device
          sudo losetup -d "$LOOP_DEVICE" || true
          
          # Compress image
          xz -9 -T0 "$IMAGE_PATH"
          mv "${IMAGE_PATH}.xz" ../uconsole-${{ matrix.distro }}-cm4.img.xz

      - name: Cleanup on failure
        if: failure() && steps.customize.outputs.LOOP_DEVICE
        run: |
          set +e
          MOUNT_POINT="${{ steps.customize.outputs.MOUNT_POINT }}"
          LOOP_DEVICE="${{ steps.customize.outputs.LOOP_DEVICE }}"
          
          echo "=====> Emergency cleanup"
          
          # Kill all processes using mount points
          sudo fuser -km "$MOUNT_POINT" 2>/dev/null || true
          
          # Force unmount everything
          sudo umount -l "$MOUNT_POINT/boot/firmware" 2>/dev/null || true
          sudo umount -l "$MOUNT_POINT" 2>/dev/null || true
          
          # Clean up device mappings
          if [ -n "$LOOP_DEVICE" ]; then
            sudo kpartx -d "$LOOP_DEVICE" 2>/dev/null || true
            sudo losetup -d "$LOOP_DEVICE" 2>/dev/null || true
          fi
          
          # Clean up any orphaned loop devices
          sudo losetup -D || true

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: uconsole-${{ matrix.distro }}-image
          path: uconsole-${{ matrix.distro }}-cm4.img.xz

  release:
    needs: [prepare-kernel, build-image]
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release tag
        id: tag
        run: |
          TAG_NAME="release-$(date +'%Y%m%d-%H%M%S')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          files: |
            kernel-debs/*.deb
            kernel-patch/*.diff
            uconsole-*-image/*.img.xz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
