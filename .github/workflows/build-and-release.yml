name: Build and Release uConsole Images

on:
  push:
    tags:
      - 'v*'
      - 'release-*'
    branches:
      - '**'      # todas las ramas

  workflow_dispatch:
    inputs:
      suite:
        description: 'Distribution suite to build (or "all" for all suites)'
        required: true
        type: choice
        options:
          - all
          - jammy
          - focal
          - bookworm
          - bullseye
          - trixie
        default: all
      kernel_mode:
        description: 'Kernel installation mode'
        required: true
        type: choice
        options:
          - prebuilt
          - build
        default: build
      create_release:
        description: 'Create a GitHub release'
        required: true
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build-kernel:
    name: Build Kernel Packages
    runs-on: ubuntu-latest
    timeout-minutes: 360
    if: (github.event_name == 'workflow_dispatch' && inputs.kernel_mode == 'build') || github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build ClockworkPi kernel using Docker
        run: |
          sudo ./scripts/build_kernel_docker.sh artifacts/kernel-debs
      
      - name: Verify kernel build output
        run: |
          echo "Checking kernel build artifacts..."
          echo "Contents of artifacts directory:"
          ls -laR artifacts/ || echo "artifacts/ directory not found"
          echo ""
          echo "Checking for .deb files:"
          find artifacts/ -name "*.deb" -ls || echo "No .deb files found"
          echo ""
          echo "Disk space usage:"
          df -h
      
      - name: Get kernel source info
        id: kernel_info
        run: |
          cd /tmp/kernel-build || true
          KERNEL_REPO="https://github.com/raspberrypi/linux.git"
          KERNEL_COMMIT="391c2e3f0599e948194a8bdc89a8ea87cd8f7d6c"
          KERNEL_BRANCH="rpi-6.12.y"
          echo "repo=${KERNEL_REPO}" >> $GITHUB_OUTPUT
          echo "commit=${KERNEL_COMMIT}" >> $GITHUB_OUTPUT
          echo "branch=${KERNEL_BRANCH}" >> $GITHUB_OUTPUT
      
      - name: Create kernel info artifact
        run: |
          mkdir -p artifacts/kernel-debs
          echo "# Kernel Build Information"
          echo ""
          echo "Built on: $(date -u)"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          echo "## Kernel Source"
          echo "Repository: ${{ steps.kernel_info.outputs.repo }}"
          echo "Branch: ${{ steps.kernel_info.outputs.branch }}"
          echo "Commit: ${{ steps.kernel_info.outputs.commit }}"
          echo ""
          echo "## Packages"
          ls -lh artifacts/kernel-debs/*.deb 2>/dev/null || echo "No .deb files found" > artifacts/kernel-debs/KERNEL_INFO.md
      
      - name: Upload kernel packages
        uses: actions/upload-artifact@v4
        with:
          name: kernel-debs
          path: artifacts/kernel-debs/
          retention-days: 90
  
  build-images:
    name: Build Images for ${{ matrix.suite }}
    runs-on: ubuntu-latest
    timeout-minutes: 240
    needs: [build-kernel]
    if: always() && (needs.build-kernel.result == 'success' || needs.build-kernel.result == 'skipped')
    strategy:
      matrix:
        suite: ${{ github.event_name == 'workflow_dispatch' && (inputs.suite == 'all' && fromJSON('["jammy", "bookworm", "trixie"]') || fromJSON(format('["{0}"]', inputs.suite))) || fromJSON('["jammy", "bookworm", "trixie"]') }}
      fail-fast: false
    
    steps:
      - name: Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          df -h
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Download kernel packages
        if: (github.event_name == 'workflow_dispatch' && inputs.kernel_mode == 'build') || github.event_name == 'push'
        uses: actions/download-artifact@v4
        with:
          name: kernel-debs
          path: artifacts/kernel-debs/
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: Determine kernel mode
        id: kernel_mode
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "mode=${{ inputs.kernel_mode }}" >> $GITHUB_OUTPUT
          else
            echo "mode=build" >> $GITHUB_OUTPUT
          fi
      
      - name: Build uConsole image for ${{ matrix.suite }}
        run: |
          export SUITE=${{ matrix.suite }}
          export KERNEL_MODE=${{ steps.kernel_mode.outputs.mode }}
          export COMPRESS_FORMAT=xz
          export OUTPUT_DIR=output/images
          sudo -E ./scripts/generate_rpi_image.sh
        env:
          DEBIAN_FRONTEND: noninteractive
      
      - name: Verify image build output
        run: |
          echo "Checking image build artifacts..."
          echo "Contents of output directory:"
          ls -laR output/ || echo "output/ directory not found"
          echo ""
          echo "Checking for image files:"
          find output/ -name "*.img*" -ls || echo "No image files found"
          echo ""
          echo "Disk space usage:"
          df -h
      
      - name: Generate checksums
        run: |
          # Verify image files exist
          if [ ! -d output/images ] || [ -z "$(ls -A output/images/uconsole-${{ matrix.suite }}-*.img.xz 2>/dev/null)" ]; then
            echo "ERROR: No image files found in output/images/" >&2
            echo "Contents of output directory:" >&2
            ls -laR output/ >&2 || echo "output/ directory not found" >&2
            exit 1
          fi
          
          cd output/images
          sha256sum uconsole-${{ matrix.suite }}-*.img.xz > uconsole-${{ matrix.suite }}-arm64.sha256
          cat uconsole-${{ matrix.suite }}-arm64.sha256
      
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: uconsole-${{ matrix.suite }}-image
          path: |
            output/images/uconsole-${{ matrix.suite }}-*.img.xz
            output/images/uconsole-${{ matrix.suite }}-*.sha256
          retention-days: 30
          compression-level: 0
  
  create-release:
    name: Create GitHub Release
    needs: [build-kernel, build-images]
    runs-on: ubuntu-latest
    if: |
      always() &&
      (needs.build-images.result == 'success') &&
      (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.create_release))
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/
      
      - name: Organize release files
        run: |
          mkdir -p release-files
          
          # Copy kernel debs if they exist
          if [ -d release-artifacts/kernel-debs ]; then
            cp release-artifacts/kernel-debs/*.deb release-files/ 2>/dev/null || true
            cp release-artifacts/kernel-debs/*.md release-files/ 2>/dev/null || true
          fi
          
          # Copy images and checksums
          find release-artifacts -name "*.img.xz" -exec cp {} release-files/ \;
          find release-artifacts -name "*.sha256" -exec cp {} release-files/ \;
          
          # List all release files
          echo "Release files:"
          ls -lh release-files/
      
      - name: Determine tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=release-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate release body
        id: release_body
        run: |
          cat > release-body.md << 'EOF'
          # uConsole Images - ${{ steps.tag.outputs.tag }}
          
          This release includes bootable Raspberry Pi images for ClockworkPi uConsole CM4 devices.
          
          ## Included Images
          
          - **Ubuntu 22.04 (jammy)**: Full-featured Ubuntu LTS
          - **Debian 12 (bookworm)**: Stable Debian release
          - **Debian 13 (trixie)**: Latest Debian testing
          
          ## Kernel Packages
          
          This release includes ClockworkPi kernel .deb packages built from source.
          
          Kernel packages included:
          - `linux-image-*.deb` - Kernel image
          - `linux-headers-*.deb` - Kernel headers for module compilation
          - `linux-libc-dev-*.deb` - Kernel headers for userspace
          
          See `KERNEL_INFO.md` for detailed kernel source information.
          
          ## Installation
          
          ### Flash Image to SD Card
          
          ```bash
          # Extract and write to SD card (replace /dev/sdX with your SD card device)
          xz -dc uconsole-jammy-arm64.img.xz | sudo dd of=/dev/sdX bs=4M status=progress conv=fsync
          sudo sync
          ```
          
          ### Install Kernel Packages on Existing System
          
          ```bash
          # Copy .deb files to your uConsole
          scp linux-*.deb uconsole@your-uconsole:/tmp/
          
          # Install on uConsole
          ssh uconsole@your-uconsole
          cd /tmp
          sudo dpkg -i linux-*.deb
          sudo apt-get install -f
          sudo reboot
          ```
          
          ## Verification
          
          Verify checksums before flashing:
          ```bash
          sha256sum -c uconsole-jammy-arm64.sha256
          ```
          
          ## Default Credentials
          
          - **Username**: uconsole
          - **Password**: uconsole
          - **Root access**: User has passwordless sudo
          
          ## Source Code
          
          - **This repository**: https://github.com/${{ github.repository }}
          - **Kernel source**: See KERNEL_INFO.md for details
          - **Commit**: ${{ github.sha }}
          
          ## More Information
          
          - Documentation: See [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
          - Issues: https://github.com/${{ github.repository }}/issues
          
          ---
          
          Built on: $(date -u)
          EOF
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: uConsole Images ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false
          files: release-files/*
          body_path: release-body.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
