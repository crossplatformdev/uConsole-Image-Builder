# Dockerfile for building ClockworkPi uConsole kernel
# This creates a reproducible build environment for kernel compilation

FROM ubuntu:24.04

# Avoid interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install kernel build dependencies
RUN echo "Updated APT sources:"
# Add arm64 architecture for cross-compilation

##APPEND APT SOURCES FOR AMD64 AFTER 'Signed-By: .*'##
RUN sed -i '/^Signed-By:/a Architectures: amd64 \n' /etc/apt/sources.list.d/ubuntu.sources
RUN cp /etc/apt/sources.list.d/ubuntu.sources /etc/apt/sources.list.d/ubuntu-src.sources
RUN cp /etc/apt/sources.list.d/ubuntu.sources /etc/apt/sources.list.d/cross.sources
# Append 'Architectures: arm64' to the new cross sources list

RUN cat /etc/apt/sources.list.d/ubuntu.sources

#REPLACE URIS FOR ARM64##
RUN sed -i 's|http://archive.ubuntu.com/ubuntu/|http://ports.ubuntu.com/ubuntu-ports/|g' /etc/apt/sources.list.d/cross.sources
RUN sed -i 's/amd64/arm64/g' /etc/apt/sources.list.d/cross.sources

RUN cat /etc/apt/sources.list.d/cross.sources

RUN dpkg --add-architecture arm64

#Ensure the Docker image has necessary packages installed
RUN apt update
RUN apt search linux-image-unsigned
RUN apt upgrade -y

# Install kernel build dependencies on docker container for architecture arm64
RUN apt install -y \
    build-essential \
    bc \
    bison \
    flex \
    libssl-dev \
    libncurses-dev \
    libelf-dev \
    kmod \
    cpio \
    rsync \
    git \
    fakeroot \
    dpkg-dev \
    debhelper \
    kernel-wedge \
    crossbuild-essential-arm64 \
    crossbuild-essential-amd64 \
    bzip2 \
    zlib1g-dev \
    libssl3t64 \
    perl \
    libc6 \
    libzstd1 \
    gcc-14 \
    g++-14 \
    gcc-14-aarch64-linux-gnu \
    g++-14-aarch64-linux-gnu 


# Install kernel build dependencies on docker container for architecture arm64
RUN apt build-dep -y linux linux-image-unsigned-6.8.0-31-generic linux-image-unsigned-6.8.0-31-lowlatency

# Create a non-root user for building (optional, can build as root)
# RUN useradd -m -u 1000 -s /bin/bash builder

# Set working directory
WORKDIR /build

# Default command shows usage
CMD ["echo", "Usage: docker run -v /path/to/output:/output kernel-builder /build/build_kernel_in_container.sh"]
